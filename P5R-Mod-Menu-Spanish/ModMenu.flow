// Import the MessageScript into the script
// The compiler will insert constant variables for each of the 
// window identifiers.
import( "ModMenu.msg" );
import( "Math.flow" );
import( "Utilities.flow" );
import( "SkillSelection.flow" );
import( "PersonaSelection.flow" );

// Store this for animating the last spawned npc
global int gLastSpawnedNpcModelHandle;
global int gFldAnimGapId;
global int gFldAnimGapIndex;
global float gFldAnimSpeed;
global bool gFldAnimShouldLoop;
global int gNpcAnimGapId;
global int gNpcAnimGapIndex;
global int gFldAnimTime;
global float gLastCamXRot;
global float gLastCamYRot;
global float gLastCamZRot;
global int gFieldMajor;
global int gFieldMinor;
global int gEventMajor;
global int gEventMinor;
global int gKfEventMajor;
global int gKfEventMinor;

void ModMenuDisplay()
{
    ALL_ENABLE_SHARE_PLAY(); //Re-enables screen recording
    BIT_OFF( 4099 ); //Removes your "tired" status
    PrintPosition(); //Logs your current coordinates
	
    while ( true )
    {
        int selection = SEL_GENERIC( -1, ModMenu );
        switch ( selection )
        {
            case -1:
                return;
            case 0:
                PlayerEditorDisplay();
                break;
            case 1:
				BattleTypeSelect();
                break;
            case 2: 
                TeleportModeStart();
                break;
            case 3: 
                BgmSelect();
                break;
            case 4:
                FieldSelect();
                break;
            case 5:
                EventSelect();
                break;
            case 6:
                CameraEditorDisplay(); 
                break;
            case 7:
                NpcControlMenuDisplay(); 
                break;
            case 8: 
                FlagsEditorDisplay(); 
                break;
            case 9: 
                CalendarEditorDisplay(); 
                break;
			case 10:
                MoviePlay();
                break;
            case 11: 
                CallOriginalSquareMenu();
                break;
            case 12:
                DisplayMessagePrompt( AboutDlg );
                break;
        }
    }
}

void PrintPosition()
{
	PUTS( "Joker Translation:" );
	int pcHandle = FLD_PC_GET_RESHND( 0 );
	PUTS( "X:" );
	PUT( FLD_MODEL_GET_X_TRANSLATE( pcHandle ) );
	PUTS( "Y:" );
	PUT( FLD_MODEL_GET_Y_TRANSLATE( pcHandle ) );
	PUTS( "Z:" );
	PUT( FLD_MODEL_GET_Z_TRANSLATE( pcHandle ) );
	
	PUTS( "Joker Rotation:" );
	PUTS( "X:" );
	PUT( FLD_MODEL_GET_X_ROTATE( pcHandle ) );
	PUTS( "Y:" );
	PUT( FLD_MODEL_GET_Y_ROTATE( pcHandle ) );
	PUTS( "Z:" );
	PUT( FLD_MODEL_GET_Z_ROTATE( pcHandle ) );
}

// Player Editor
void PlayerEditorDisplay()
{
    while ( true )
    {
        int selection = SEL_GENERIC( PlayerMenuName, PlayerMenu );
        switch ( selection )
        {
            case -1:
                return;
            case 0:
                PersonaEditorOpen();
                break;
            case 1:
                StatEditorDisplay();
                break;
            case 2: 
                ItemEditorDisplay();
                break;
            case 3:
                CommuSetRankSelect();
                break;
            case 4: // Set Protag Name
                INIT_IME_DRIVER();
                CALL_NAME_ENTRY();
                END_IME_DRIVER();
                break;
            case 5: // Set Team Name
                INIT_IME_DRIVER();
                CALL_PHANTOM_NAME_ENTRY();
                END_IME_DRIVER();
                break;
            case 6:
                PlayerAnimViewerDisplay();
                break;
            case 7:
                PlayerSelectModelScale();
                break;
            case 8:
                PlayerAttachItemModel(FLD_PC_GET_RESHND(0));
                break;
            case 9: 
                PlayerSetMaxMoney();
                break;
			case 10: // Set level 99
                ALL_LEVEL_MAX();
                break;
			case 11:
				SetMaxHPSP();
				break;
        }
    }
}

// Persona Stock Editor
void PersonaEditorOpen() 
{
    while ( true )
    {
        int selection = SEL_GENERIC( PersonaMenuName, PersonaMenu );
        switch ( selection )
        {
            case -1:
                return;
            case 0:
                PersonaAddMenuOpen();
                break;
            case 1:
                PersonaDeleteAllSelect();
                break;
            case 2:
                PersonaAddSkillMenuOpen();
                break;
            case 3:
                PersonaAddAllToCompendium();
                break;
			case 4:
                EvolvePersona();
                break;
        }
    }
}

void PersonaAddMenuOpen()
{
    while ( true )
    {
        int selection = SEL_GENERIC_NOT_HELP( PersonaAddMenuName, PersonaAddMenu );
        
        switch ( selection )
        {
            case -1:
                return;
            case 0:
                PersonaAddSelect( false );
                break;
            case 1:
                PersonaAddSelect( true );
                break;
        }
    }
}

void PersonaAddSelect( bool useNumberInput )
{
    int personaId;
    if ( useNumberInput )
    {
        personaId = SelectNumberPrompt( PersonaAddPrompt, 3 ); 
        if ( personaId == -1 )
            return;
    }
    else
    {
        personaId = PersonaSelectByName();
        if ( personaId == -1 )
            return;
    }
    
    ADD_PERSONA_STOCK( personaId );
    MSG_SYSTEM( PersonaAdded );
}

void PersonaDeleteAllSelect()
{
    bool deleteConfirm = SelectNoYesPrompt( PersonaDelPrompt );
    
    if ( deleteConfirm ) {
        CLEAR_PERSONA_STOCK();
        MSG_SYSTEM( PersonaDeleted );
    }
    
}

void PersonaAddSkillMenuOpen()
{
    while ( true )
    {
        int selection = SEL_GENERIC_NOT_HELP( PersonaAddSkillMenuName, PersonaAddSkillMenu );
        
        switch ( selection )
        {
            case -1:
                return;
            case 0:
                PersonaAddSkillSelect( false );
                break;
            case 1:
                PersonaAddSkillSelect( true );
                break;
        }
    }
}

void PersonaAddSkillSelect( bool useNumberInput )
{
    int unitId = SEL_GENERIC_NOT_HELP( UnitMenuName, UnitSelect );
    if ( unitId == -1 ) // Cancel
        return;
        
    int skillId;
    if ( useNumberInput )
    {
        skillId = SelectNumberPrompt( SkillPrompt, 3 );
        if ( skillId == -1 ) // Cancel
            return;
    }
    else
    {
        skillId = SkillSelectByName();
        if ( skillId == -1 )
            return;
    }
        
    SKILL_ADD( ( unitId + 1 ), skillId );
    FADEIN( 0, 10 );
    FADE_SYNC();
    FLD_REQ_FLASHBACK( 152, 51 );
    FLD_END_FLASHBACK();
}

void PersonaAddAllToCompendium() 
{
    for ( int i = 0; i < 463; i++ )
    {
        if ( i % 6 == 0 )
            CLEAR_PERSONA_STOCK();

        ADD_PERSONA_STOCK( i );
    }
    CLEAR_PERSONA_STOCK();
}

void EvolvePersona()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, UnitSelect3 );

    switch ( selection )
    {
        case -1:
            break;
        case 0:
            PERSONA_EVOLUTION( 2 );
            break;
        case 1:
            PERSONA_EVOLUTION( 3 );
            break;
        case 2:
            PERSONA_EVOLUTION( 4 );
            break;
        case 3:
            PERSONA_EVOLUTION( 5 );
            break;
        case 4:
            PERSONA_EVOLUTION( 6 );
            break;
        case 5:
            PERSONA_EVOLUTION( 7 );
            break;
        case 6:
            PERSONA_EVOLUTION( 8 );
            break;
        case 7:
            PERSONA_EVOLUTION( 9 );
            break;
        case 8:
            PERSONA_EVOLUTION( 10 );
            break;
		case 9:
			for ( int i = 2; i <= 10; i++ ) 
			{
				PERSONA_EVOLUTION( i );
			}
			break;
	}
}

// Stat Editor
void StatEditorDisplay()
{
    while ( true )
    {
        int selection = SEL_GENERIC( StatsMenuName, StatsMenu );
        
        if ( selection == -1 )
            return;
        
        int pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
        
        if ( pointsToAdd == -1 )
            continue;

        switch ( selection )
        {
            case -1:
                return;
            case 0: // Knowledge
                StatAddPointAndDisplay( pointsToAdd, 0, 0, 0, 0 );
                break;
            case 1: // Charm
                StatAddPointAndDisplay( 0, pointsToAdd, 0, 0, 0 );
                break;
            case 2: // Proficiency
                StatAddPointAndDisplay( 0, 0, pointsToAdd, 0, 0 );
                break;
            case 3: // Guts
                StatAddPointAndDisplay( 0, 0, 0, pointsToAdd, 0 );
                break;
            case 4: // Kindness
                StatAddPointAndDisplay( 0, 0, 0, 0, pointsToAdd );
                break;
        }
    }
}

void StatAddPointAndDisplay( int p1, int p2, int p3, int p4, int p5 )
{
    ADD_PC_ALL_PARAM( p1, p2, p3, p4, p5 );
    DISP_PC_PARAM_METER();
}

// Item Editor
void ItemEditorDisplay() 
{
    while ( true )
    {
        int itemType = SEL_GENERIC( ItemMenuName, ItemMenu );
    
        switch ( itemType ) 
        {
            case -1:
                return;
            case 0: // Consumables
                ItemGetSelect( 0x3000 );
                break;
            case 1: // Accessories
                ItemGetSelect( 0x2000 );
                break;
            case 2: // Key Items
                ItemGetSelect( 0x4000 );
                break;
            case 3: // Ranged Weapons
                ItemGetSelect( 0x8000 );
                break;
            case 4: // Melee Weapons
                ItemGetSelect( 0x0000 );
                break;
            case 5: // Outfits
                ItemGetSelect( 0x7000 );
                break;
            case 6: // Armor
                ItemGetSelect( 0x1000 );
                break;
            case 7: // Materials
                ItemGetSelect( 0x5000 );
                break;
            case 8: // Skill Cards
                ItemGetSelect( 0x6000 );
                break;
        }
    }
}

void ItemGetSelect( int type ) 
{
    int itemId = SelectNumberPrompt( ItemPrompt, 4 );
    if (itemId == -1)
        return;
    int amount = SelectNumberPrompt( ItemPrompt2, 2 );
    if (amount == -1)
        return;
		
	ItemGet( type, itemId, amount);
	GET_ITEMS_WINDOW( 0 );
}

void ItemGet( int type, int itemId, int amount)
{
	GET_ITEM_BUF_RESET();
    GET_ITEM_BUF_SET( type + itemId, amount );
    SET_ITEM_NUM( type + itemId, GET_ITEM_NUM( type + itemId ) + amount );
}

void CommuSetRankSelect()
{
    int cmmId = SEL_GENERIC( CommuMenuName, CommuMenu ) + 1;
    
    if ( cmmId <= 0 || cmmId >= 23 )
        return;
        
    DisplayMessagePrompt( CmmDialog2 );
    int lvl = SEL_GENERIC_NOT_HELP( -1, Select1to10Dialog ) + 1;
    
    if ( lvl == 0 )
        return;
        
    CMM_RANKUP( cmmId, lvl, 1 );
    
    if ( !CMM_EXIST( cmmId ) ) {
        CMM_OPEN( cmmId );
    }
    
    CMM_SET_LV( cmmId, lvl );
    CMM_ADD_POINT( cmmId, 9999 );
}

void PlayerAnimViewerDisplay()
{
    while ( true )
    {
        int selection = SEL_GENERIC_NOT_HELP( AnimMenuName, AnimMenu );
    
        switch ( selection )
        {
            case -1:
                return;
            case 0: // Joker Animation Viewer
                FieldModelAnimViewerDisplay( FLD_PC_GET_RESHND( 0 ) );
                break;
            case 1: // Morgana Out of Bag
                MorganaShowFace();
                break;
            case 2: // Morgana In Bag
                MorganaReturnBag();
                break;
            case 3: // Show Bag
                BIT_ON( 4206 );
                BIT_OFF( 4207 );
                BIT_OFF( 4112 );
                DisplayMessagePrompt( BagShowHide );
                break;
            case 4: // Hide Bag
                BIT_OFF( 4206 );
                BIT_ON( 4207 );
                BIT_ON( 4112 );
                DisplayMessagePrompt( BagShowHide );
                break;
            case 5: // Umbrella On
                FLD_BAG_ANIM_DISABLE();
                FLD_UMBRELLA_ANIM_CHANGE( 1 );
            case 6: // Umbrella Off
                FLD_BAG_ANIM_DISABLE();
                FLD_UMBRELLA_ANIM_CHANGE( 0 );
        }
    }
}

// Field Model Anim Viewer
void FieldModelAnimViewerDisplay( int resHandle ) 
{
    while ( true )
    {
        int selection = SEL_GENERIC( GAPMenuName, GAPMenu );
        
        switch ( selection )
        {
            case -1:
                return;
            case 0:
                FieldModelAnimSelectId();
                break;
            case 1:
                FieldModelAnimSelectIndex();
                break;
            case 2:
                FieldModelAnimSelectLoop();
                break;
            case 3:
                FieldModelAnimSelectSpeed();
                break;
            case 4:
                FieldModelAnimSelectTime();
                break;
            case 5:
                FieldModelPlayAnim( resHandle, gFldAnimGapId, gFldAnimGapIndex );
                break;
        }   
    }
}

void FieldModelPlayAnim( int resHandle, int gapid, int index ) 
{
    int clone = FLD_MODEL_CLONE_ADDMOTION( resHandle, gapid );
    FLD_UNIT_WAIT_DISABLE( clone );
    MDL_ANIM( clone, index, gFldAnimShouldLoop, 0, gFldAnimSpeed );
    WAIT(gFldAnimTime);
    FLD_MODEL_REVERT_ADDMOTION( resHandle, clone );
    //FLD_UNIT_SET_WAIT( resHandle );
}

void FieldModelAnimSelectId()
{
    int temp = SelectNumberPrompt( GapPrompt, 3 ); // Gap filename last 3 digits
    if ( temp != -1 )
        gFldAnimGapId = temp;
}

void FieldModelAnimSelectIndex()
{
    int temp = SelectNumberPrompt( GapPrompt2, 2 );
    if ( temp != -1 )
        gFldAnimGapIndex = temp;
}

void FieldModelAnimSelectLoop()
{
    gFldAnimShouldLoop = SelectOffOnPrompt( GapPrompt3 );
}

void FieldModelAnimSelectSpeed() 
{
    float temp = SelectFloatPrompt( GapPrompt5 );
    if ( temp != -1 )
        gFldAnimSpeed = temp / 10;
}

void FieldModelAnimSelectTime() 
{
    int temp = SelectNumberPrompt( GapPrompt6, 1 );
    if ( temp != -1 )
        gFldAnimTime = temp * 30;
}

void PlayerSelectModelScale() 
{
    float temp = SelectFloatPrompt( ScalePrompt );
    if ( temp != -1 )
    {
        float modelScale = temp / 10;
        FLD_MODEL_SET_SCALE( FLD_PC_GET_RESHND( 0 ), modelScale );
    }
}

void PlayerAttachItemModel(int resHandle)
{
    int itemModelMajor = SelectNumberPrompt( ItemSpawnPrompt, 4 );
    int itemModelMinor = SelectNumberPrompt( ItemSpawnPrompt2, 3 );
    //FLD_PC_MODEL_ATTACH_ITEM( resHandle, itemModelMajor, itemModelMinor );
    int itemModel = FLD_ITEM_MODEL_LOAD( itemModelMajor, itemModelMinor );
    FLD_MODEL_LOADSYNC( itemModel );
    FLD_MODEL_SET_VISIBLE( itemModel, 1, 0 );
    FLD_MODEL_ATTACH_TRANSLATE( itemModel, resHandle, 101 );
    FLD_MODEL_ATTACH_ROTATE( itemModel, resHandle, 101 );
}

// Camera Editor
void CameraEditorDisplay()
{
    while ( true )
    {
        int selection = SEL_GENERIC( CameraMenuName, CameraMenu );
    
        switch ( selection )
        {
            case -1:
                return;
            case 0:
                CameraInputPos();
                break;
            case 1:
                CameraInputFov();
                break;
			case 2:
				CameraInputZoom();
				break;
            case 3:
                CameraInputRot();
                break;
            case 4:
                CameraUnlock();
                break;
            case 5:
                CameraLock();
                break;
            case 6:
                CAMERA_SHAKE_STOP();
                break;
        }
    }
}

void CameraInputPos() 
{
    DisplayMessagePrompt( CameraPrompt );
    
    while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
    {
        bool anyValueSet = false;
        
        if ( PAD_CHK_PRESS( PadButton.Any ) ) // if any button is pressed
        {
            float x = FLD_CAMERA_GET_X_POS();
            float y = FLD_CAMERA_GET_Y_POS();
            float z = FLD_CAMERA_GET_Z_POS();
            float multiplier = 1f;

            if ( PAD_CHK_PRESS( PadButton.Cross ) ) 
                multiplier = 3f;

            if ( PAD_CHK_PRESS( PadButton.Up ) ) 
            {
				if ( PAD_CHK_PRESS( PadButton.Square ) )
					z = z + ( 5f * multiplier );
				else
					y = y + ( 5f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Right ) ) 
            {
                x = x + ( 5f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Down ) ) 
            {
				if ( PAD_CHK_PRESS( PadButton.Square ) )
					z = z - ( 5f * multiplier );
				else
					y = y - ( 5f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Left ) ) 
            {
                x = x - ( 5f * multiplier );
                anyValueSet = true;
            }

            if ( anyValueSet ) 
                FLD_CAMERA_SET_POS( x, y, z );
        }
        
        WAIT( 3 );
    }
}

void CameraInputFov() 
{
    DisplayMessagePrompt( CameraPrompt );
    
    while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
    {
        bool anyValueSet = false;
        
        if ( PAD_CHK_PRESS( PadButton.Any ) )
        {
            float fov = FLD_CAMERA_GET_FOVY();
            float multiplier = 1f;

            if ( PAD_CHK_PRESS( PadButton.Cross ) ) 
                multiplier = 5f;

            if ( PAD_CHK_PRESS( PadButton.Up ) ) 
            {
                fov = fov + ( 1f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Right ) ) 
            {
                fov = fov + ( 1f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Down ) ) 
            {
                fov = fov - ( 1f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Left ) ) 
            {
                fov = fov + ( 1f * multiplier );
                anyValueSet = true;
            }

            if ( anyValueSet ) 
                FLD_CAMERA_SET_FOVY(fov);
        }
        
        WAIT( 3 );
    }
}

void CameraInputZoom() 
{
    DisplayMessagePrompt( CameraPrompt );
    
    while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
    {
        bool anyValueSet = false;
        
        if ( PAD_CHK_PRESS( PadButton.Any ) )
        {
            int zoom = 1;
            float multiplier = 1f;

            if ( PAD_CHK_PRESS( PadButton.Cross ) ) 
                multiplier = 5f;

            if ( PAD_CHK_PRESS( PadButton.Up ) ) 
            {
                zoom = zoom + ( 1f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Right ) ) 
            {
                zoom = zoom + ( 1f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Down ) ) 
            {
                zoom = zoom - ( 1f * multiplier );
                anyValueSet = true;
            }

            if ( PAD_CHK_PRESS( PadButton.Left ) ) 
            {
                zoom = zoom + ( 1f * multiplier );
                anyValueSet = true;
            }

            if ( anyValueSet ) 
                FLD_CAMERA_ZOOM(zoom);
        }
        
        WAIT( 3 );
    }
}

void CameraInputRot() 
{
    const float ADD_VELOCITY_PER_PRESS = 15f;
    float cameraVelocityX = 0f;
    float cameraVelocityY = 0f;
    float cameraVelocityZ = 0f;  
    
    if ( ( gLastCamXRot == 0f ) && ( gLastCamYRot == 0f ) && ( gLastCamZRot == 0f ) ) 
    {
        gLastCamXRot = FLD_CAMERA_GET_X_ROT();
        gLastCamYRot = FLD_CAMERA_GET_Y_ROT();
        gLastCamZRot = FLD_CAMERA_GET_Z_ROT();
    }
    
    int runs = 0;

    while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
    {
        if ( ++runs > 4 )
        {
            runs = 0;
            cameraVelocityX /= 2;
            cameraVelocityY /= 2;
            cameraVelocityZ /= 2;
        }
        
        if ( PAD_CHK_PRESS( PadButton.Any ) )
        {
            if ( PAD_CHK_PRESS( PadButton.Up ) ) 
            {
                if ( PAD_CHK_PRESS( PadButton.Square ) )
                    cameraVelocityZ += ADD_VELOCITY_PER_PRESS;
                else
                    cameraVelocityY += ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Right ) ) 
                cameraVelocityX += ADD_VELOCITY_PER_PRESS;

            if ( PAD_CHK_PRESS( PadButton.Down ) ) 
            {
                if ( PAD_CHK_PRESS( PadButton.Square ) )
                    cameraVelocityZ -= ADD_VELOCITY_PER_PRESS;
                else
                    cameraVelocityY -= ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Left ) ) 
                cameraVelocityX -= ADD_VELOCITY_PER_PRESS;
        }
        
        gLastCamXRot += cameraVelocityX;
        gLastCamYRot += cameraVelocityY;
        gLastCamZRot += cameraVelocityZ;
        CameraSetRot( gLastCamXRot, gLastCamYRot, gLastCamZRot );

        SYNC();
    }
}

void CameraSetRot( float x, float y, float z )
{
    float qX;
    float qY;
    float qZ;
    float qW;
    QuaternionFromEulerDegrees( x, y, z, out qX, out qY, out qZ, out qW );

    FLD_CAMERA_SET_ROT( qX, qY, qZ, qW );
}

void CameraUnlock()
{
    FLD_CAMERA_UNLOCK();
    FLD_CAMERA_BEHIND_UNLOCK();
}

void CameraLock()
{
    FLD_CAMERA_LOCK();
    FLD_CAMERA_BEHIND_LOCK();
}

// Npc Model Control
void NpcControlMenuDisplay()
{
    while ( true )
    {
        int selection = SEL_GENERIC( SpawnMenuName, SpawnMenu );
    
        switch ( selection )
        {
            case -1:
                return;
            case 0: // Spawn Model
                NpcSpawnSelect();
				PrintPosition();
                break;
            case 1: // Animate Model
                NpcAnimViewerDisplay( gLastSpawnedNpcModelHandle );
                break;
            case 2: // Scale Model
                NpcScale();
                break;
            case 3: // Attach Item Model
                PlayerAttachItemModel(gLastSpawnedNpcModelHandle);
                break;
            case 4: // Spawn Object
                NpcSpawnObjectModel(FLD_PC_GET_RESHND(0));
				PrintPosition();
                break;
        }
    }
}

void NpcSpawnSelect()
{
    int modelIdMajor = SelectNumberPrompt( NPCPrompt, 4 );
    if ( modelIdMajor == -1 )
        return;
    int modelIdMinor = SelectNumberPrompt( NPCPrompt2, 3 );
    if ( modelIdMinor == -1 )
        return;
    int modelIdSub = SelectNumberPrompt( NPCPrompt3, 2 );
    if ( modelIdSub == -1 )
        return;
    gLastSpawnedNpcModelHandle = NpcSpawn( modelIdMajor, modelIdMinor, modelIdSub );
}

int NpcSpawn( int modelIdMajor, int modelIdMinor, int modelIdSub )
{
    int pcHandle = FLD_PC_GET_RESHND( 0 );
    float x = FLD_MODEL_GET_X_TRANSLATE( pcHandle );
    float y = FLD_MODEL_GET_Y_TRANSLATE( pcHandle );
    float z = FLD_MODEL_GET_Z_TRANSLATE( pcHandle );
    float xr = FLD_MODEL_GET_X_ROTATE( pcHandle );
    float yr = FLD_MODEL_GET_Y_ROTATE( pcHandle );
    float zr = FLD_MODEL_GET_Z_ROTATE( pcHandle );
    
    int npcHandle = FLD_NPC_MODEL_LOAD( modelIdMajor, modelIdMinor, modelIdSub );
    FLD_MODEL_LOADSYNC( npcHandle );
    FLD_MODEL_SET_TRANSLATE( npcHandle, x, y, z, 0 );
    FLD_MODEL_SET_ROTATE( npcHandle, xr, yr, zr, 0 );
    FLD_MODEL_SET_VISIBLE( npcHandle, 1, 0 );
    
    return npcHandle;
}

void NpcAnimViewerDisplay( int resHandle ) 
{
    while ( true )
    {
        int selection = SEL_GENERIC( GAPMenuName, GAPMenu );
        
        switch ( selection )
        { 
            case -1:
                return;
            case 0:
                NpcModelAnimSelectId();
                break;
            case 1:
                NpcModelAnimSelectIndex();
                break;
            case 2:
                FieldModelAnimSelectLoop();
                break;
            case 3:
                FieldModelAnimSelectSpeed();
                break;
            case 4:
                FieldModelAnimSelectTime();
                break;
            case 5:
                FieldModelPlayAnim( resHandle, gNpcAnimGapId, gNpcAnimGapIndex );
                break;
        }
    }
}

void NpcModelAnimSelectId()
{
    int temp = SelectNumberPrompt( GapPrompt, 3 );
    if ( temp != -1 )
        gNpcAnimGapId = temp;
}

void NpcModelAnimSelectIndex()
{
    int temp = SelectNumberPrompt( GapPrompt2, 2 );
    if ( temp != -1 )
        gNpcAnimGapIndex = temp;
}

void NpcScale()
{
    float temp = SelectFloatPrompt( ScalePrompt );
    if ( temp != -1 )
    {
        float modelScale = temp / 10;
        FLD_MODEL_SET_SCALE( gLastSpawnedNpcModelHandle, modelScale );
    }
}

void NpcSpawnObjectModel( int resHandle )
{
    float x = FLD_MODEL_GET_X_TRANSLATE( resHandle );
    float y = FLD_MODEL_GET_Y_TRANSLATE( resHandle );
    float z = FLD_MODEL_GET_Z_TRANSLATE( resHandle );
    float xr = FLD_MODEL_GET_X_ROTATE( resHandle );
    float yr = FLD_MODEL_GET_Y_ROTATE( resHandle );
    float zr = FLD_MODEL_GET_Z_ROTATE( resHandle );
    
    int itemModelMajor = SelectNumberPrompt( ObjectSpawnPrompt, 3 );
    int itemModelMinor = SelectNumberPrompt( ObjectSpawnPrompt2, 3 );
    
    int objectModel = FLD_OBJ_MODEL_LOAD( itemModelMajor, itemModelMinor );
    FLD_MODEL_LOADSYNC( objectModel );
    //FLD_OBJ_MODEL_LINKBG( objectModel );
    
    FLD_MODEL_SET_TRANSLATE( objectModel, x, y, z, 0 );
    FLD_MODEL_SET_ROTATE( objectModel, xr, yr, zr, 0 );
    FLD_MODEL_SYNC_TRANSLATE( objectModel );
    FLD_MODEL_SYNC_ROTATE( objectModel );
    FLD_MODEL_SET_VISIBLE( objectModel, 1, 0 );
}

// Battle
void BattleTypeSelect()
{
    int selection = SEL_GENERIC_NOT_HELP( BattleTypeName, BattleTypeMenu );
        
    switch ( selection )
    {
        case -1:
            return;
        case 0:
            RegularBattle();
            break;
        case 1:
            BossSelectMenu();
            break;
        case 2:
            EventBattle();
            break;
    }
}

void RegularBattle() 
{
    int encount = SelectNumberPrompt( EncounterPrompt, 4 );
    
    if ( encount == -1 )
        return;
    
    CALL_BATTLE( encount );
    WAIT_BATTLE();
    ReloadPreviousField();
}

// Boss Select
void BossSelectMenu()
{
	int selection = SEL_GENERIC_NOT_HELP( BossTypeName, BossType );
	
	switch (selection) {
		case -1:
            break;
		case 0:
			ManualBossSelect();
			break;
		case 1:
			PalaceSelectMenu();
			break;
	}
}

//Dungeon/Palace Select
void PalaceSelectMenu()
{
	int selection = SEL_GENERIC_NOT_HELP( PalaceName, PalaceMenu );
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            Palace1();
            break;
        case 1:
            Palace2();
            break;
        case 2:
            Palace3();
            break;
        case 3:
            Palace4();
            break;
        case 4:
            Palace5();
            break;
        case 5:
            Palace6();
            break;
        case 6:
            Palace7();
            break;
        case 7:
            Palace8();
            break;
        case 8:
            Misc1();
            break;
    }
}

void Palace1()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Palace1 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 1 );
            break;
        case 1:
            FLD_START_BOSS( 2 );
            break;
        case 2:
            FLD_START_BOSS( 3 );
            break;
        case 3:
            FLD_START_BOSS( 4 );
            break;
        case 4:
            FLD_START_BOSS( 5 );
            break;
        case 5:
            FLD_START_BOSS( 6 );
            break;
        case 6:
            FLD_START_BOSS( 7 );
            break;
        case 7:
            FLD_START_BOSS( 8 );
            break;
        case 8:
            FLD_START_BOSS( 9 );
            break;
        case 9:
            FLD_START_BOSS( 10 );
            break;
        case 10:
            FLD_START_BOSS( 11 );
            break;
        case 11:
            FLD_START_BOSS( 12 );
            break;
        case 12:
            FLD_START_BOSS( 13 );
            break;
    }
}

void Palace2()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Palace2 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 14 );
            break;
        case 1:
            FLD_START_BOSS( 15 );
            break;
        case 2:
            FLD_START_BOSS( 16 );
            break;
        case 3:
            FLD_START_BOSS( 17 );
            break;
        case 4:
            FLD_START_BOSS( 18 );
            break;
    }
}

void Palace3()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Palace3 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 19 );
            break;
        case 1:
            FLD_START_BOSS( 20 );
            break;
        case 2:
            FLD_START_BOSS( 21 );
            break;
        case 3:
            FLD_START_BOSS( 22 );
            break;
        case 4:
            FLD_START_BOSS( 23 );
            break;
        case 5:
            FLD_START_BOSS( 24 );
            break;
        case 6:
            FLD_START_BOSS( 25 );
            break;
    }
}

void Palace4()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Palace4 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 26 );
            break;
        case 1:
            FLD_START_BOSS( 27 );
            break;
        case 2:
            FLD_START_BOSS( 28 );
            break;
        case 3:
            FLD_START_BOSS( 29 );
            break;
        case 4:
            FLD_START_BOSS( 30 );
            break;
        case 5:
            FLD_START_BOSS( 31 );
            break;
    }
}

void Palace5()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Palace5 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 32 );
            break;
        case 1:
            FLD_START_BOSS( 33 );
            break;
        case 2:
            FLD_START_BOSS( 34 );
            break;
        case 3:
            FLD_START_BOSS( 35 );
            break;
        case 4:
            FLD_START_BOSS( 36 );
            break;
        case 5:
            FLD_START_BOSS( 37 );
            break;
    }
}

void Palace6()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Palace6 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 38 );
            break;
        case 1:
            FLD_START_BOSS( 39 );
            break;
        case 2:
            FLD_START_BOSS( 40 );
            break;
        case 3:
            FLD_START_BOSS( 41 );
            break;
        case 4:
            FLD_START_BOSS( 42 );
            break;
        case 5:
            FLD_START_BOSS( 43 );
            break;
        case 6:
            FLD_START_BOSS( 44 );
            break;
        case 7:
            FLD_START_BOSS( 45 );
            break;
        case 8:
            FLD_START_BOSS( 46 );
            break;
        case 9:
            FLD_START_BOSS( 47 );
            break;
        case 10:
            FLD_START_BOSS( 48 );
            break;
    }
}

void Palace7()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Palace7 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 49 );
            break;
        case 1:
            FLD_START_BOSS( 50 );
            break;
        case 2:
            FLD_START_BOSS( 51 );
            break;
        case 3:
            FLD_START_BOSS( 52 );
            break;
        case 4:
            FLD_START_BOSS( 53 );
            break;
        case 5:
            FLD_START_BOSS( 54 );
            break;
        case 6:
            FLD_START_BOSS( 55 );
            break;
        case 7:
            FLD_START_BOSS( 56 );
            break;
        case 8:
            FLD_START_BOSS( 57 );
            break;
        case 9:
            FLD_START_BOSS( 58 );
            break;
        case 10:
            FLD_START_BOSS( 59 );
            break;
    }
}

void Palace8()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Palace8 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 60 );
            break;
        case 1:
            FLD_START_BOSS( 61 );
            break;
        case 2:
            FLD_START_BOSS( 62 );
            break;
        case 3:
            FLD_START_BOSS( 63 );
            break;
        case 4:
            FLD_START_BOSS( 64 );
            break;
        case 5:
            FLD_START_BOSS( 65 );
            break;
        case 6:
            FLD_START_BOSS( 66 );
            break;
        case 7:
            FLD_START_BOSS( 67 );
            break;
        case 8:
            FLD_START_BOSS( 68 );
            break;
        case 9:
            FLD_START_BOSS( 69 );
            break;
    }
}

void Misc1()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Misc1 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 0 );
            break;
        case 1:
            FLD_START_BOSS( 70 );
            break;
        case 2:
            FLD_START_BOSS( 71 );
            break;
        case 3:
            FLD_START_BOSS( 72 );
            break;
        case 4:
            FLD_START_BOSS( 73 );
            break;
        case 5:
            FLD_START_BOSS( 74 );
            break;
        case 6:
            FLD_START_BOSS( 75 );
            break;
        case 7:
            FLD_START_BOSS( 76 );
            break;
        case 8:
            FLD_START_BOSS( 77 );
            break;
        case 9:
            FLD_START_BOSS( 78 );
            break;
        case 10:
            FLD_START_BOSS( 79 );
            break;
        case 11:
            Misc2(); //next
            break;
    }
}

void Misc2()
{
    int selection = SEL_GENERIC_NOT_HELP( -1, Misc2 );
        
    switch ( selection )
    {
        case -1:
            break;
        case 0:
            FLD_START_BOSS( 80 );
            break;
        case 1:
            FLD_START_BOSS( 81 );
            break;
        case 2:
            FLD_START_BOSS( 82 );
            break;
        case 3:
            FLD_START_BOSS( 83 );
            break;
        case 4:
            FLD_START_BOSS( 84 );
            break;
        case 5:
            FLD_START_BOSS( 85 );
            break;
        case 6:
            FLD_START_BOSS( 86 );
            break;
        case 7:
            FLD_START_BOSS( 87 );
            break;
        case 8:
            Misc1(); //previous
            break;
    }
}

void EventBattle()
{
    while ( true )
    {
        int selection = SEL_GENERIC_NOT_HELP( EventBattleName, EventBattleSelect );
        switch ( selection )
        {
            case -1:
                return;
            case 0:
                CALL_EVENTBATTLE( 422, 1, 779 );
                break;
            case 1:
                CALL_EVENTBATTLE( 422, 3, 781 );
                break;
            case 2: 
                CALL_EVENTBATTLE( 448, 1, 786 );
                break;
            case 3:
                CALL_EVENTBATTLE( 459, 2, 785 );
                break;
            case 4: 
                CALL_EVENTBATTLE( 500, 1, 790 );
                break;
            case 5:
                CALL_EVENTBATTLE( 131, 1, 647 );
                break;
        }
    }
    
    WAIT_BATTLE();
    
    // TODO(TGE): does not reload the field, stuck on loading screen
    // however the mod menu remains accessible.
    ReloadPreviousField();
}

// Teleport Mode 
void TeleportModeStart()
{
    const float ADD_VELOCITY_PER_PRESS = 5f;
    
    int playerResHandle = FLD_PC_GET_RESHND( 0 );
    
    float playerVelocityX = 0f;
    float playerVelocityY = 0f;
    float playerVelocityZ = 0f;    
    int runs = 0;

    while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
    {
        ++runs;
        if ( runs > 4 )
        {
            runs = 0;
            playerVelocityX /= 2;
            playerVelocityY /= 2;
            playerVelocityZ /= 2;
        }
        
        if ( PAD_CHK_PRESS( PadButton.Any ) )
        {
            if ( PAD_CHK_PRESS( PadButton.Up ) ) 
            {
                if ( PAD_CHK_PRESS( PadButton.Square ) )
                    playerVelocityZ += ADD_VELOCITY_PER_PRESS;
                else
                    playerVelocityY += ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Right ) ) 
            {
                playerVelocityX += ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Down ) ) 
            {
                if ( PAD_CHK_PRESS( PadButton.Square ) )
                    playerVelocityZ -= ADD_VELOCITY_PER_PRESS;
                else
                    playerVelocityY -= ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Left ) ) 
            {
                playerVelocityX -= ADD_VELOCITY_PER_PRESS;
            }
        }
        
        float x = FLD_MODEL_GET_X_TRANSLATE( playerResHandle ) + playerVelocityX;
        float y = FLD_MODEL_GET_Y_TRANSLATE( playerResHandle ) + playerVelocityY;
        float z = FLD_MODEL_GET_Z_TRANSLATE( playerResHandle ) + playerVelocityZ;        
        FLD_MODEL_RUN_TRANSLATE( playerResHandle, x, y, z );

        SYNC();
    }
}

// BGM Select
void BgmSelect()
{
    // Display the dialog window
    MSG_WND_DSP(); 

    // Display dialog
    MSG( SelectBgmDialog, 0 ); 
    
    // Close the dialog window
    MSG_WND_CLS(); 

    int bgmId = SelectNumber( 3 );
    if ( bgmId == -1 )
        return;

    // Play bgm
    BGM( bgmId );
}

// Field Select
void FieldSelect()
{
    while ( true )
    {
        int selection = SEL_GENERIC( FieldMenuName, FieldMenu );
        
        switch ( selection )
        { 
            case -1:
                return;
            case 0:
                int temp = SelectNumberPrompt( FieldDlg, 3 );
                if ( temp == -1 )
                    break;
                gFieldMajor = temp;
                
                temp = SelectNumberPrompt( FieldDlg2, 3 );
                if ( temp == -1 )
                    break;
                gFieldMinor = temp;
                break;
            case 1:
                if (gFieldMajor == 0 && gFieldMinor == 0)
                    MSG_SYSTEM( LoadCheckError );
                else
                    CALL_FIELD( gFieldMajor, gFieldMinor, 0, 0  );
                return;
			case 2:
				CALL_FIELD( FLD_GET_PREV_MAJOR(), FLD_GET_PREV_MINOR(), 0, 0 );
				return;
        }
    }
    
}

// Event Select
void EventSelect() 
{
    while ( true )
    {
        int selection = SEL_GENERIC( EventMenuName, EventMenu );
        
        switch ( selection )
        { 
            case -1:
                return;
            case 0:
                EventSelectIds();
                break;
            case 1:
                EventLoadSelected();
                return;
			case 2:
                KfEventSelectIds();
                break;
            case 3:
                KfEventLoadSelected();
                return;
        }
    }
}

void EventSelectIds()
{
    int temp = SelectNumberPrompt( EventDlg, 3 );
    if ( temp == -1 )
        return;
    gEventMajor = temp;
    
    temp = SelectNumberPrompt( EventDlg2, 3 );
    if ( temp == -1 )
        return;
        
    gEventMinor = temp;
}

void EventLoadSelected()
{
    if ( gEventMajor == 0 && gEventMinor == 0 )
    {
        MSG_SYSTEM(LoadCheckError);
        return;
    }
    
    CALL_EVENT( gEventMajor, gEventMinor );
    ReloadPreviousField();
}

void KfEventSelectIds()
{
    int temp = SelectNumberPrompt( KfEventDlg, 3 );
    if ( temp == -1 )
        return;
    gKfEventMajor = temp;

    temp = SelectNumberPrompt( KfEventDlg2, 3 );
    if ( temp == -1 )
        return;

    gKfEventMinor = temp;
}

void KfEventLoadSelected()
{
    if ( gKfEventMajor == 0 && gKfEventMinor == 0 )
    {
        MSG_SYSTEM(LoadCheckError);
        return;
    }

    CALL_KF_EVENT( gKfEventMajor, gKfEventMinor, 0, 0 );
    ReloadPreviousField();
}

void PlayerSetMaxMoney() 
{
    GET_MONEY_WINDOW( 9999999, 0 );
    CALL_GLOBAL_MONEY_PANEL();
    CHANGE_GLOBAL_MONEY( 9999999, 0 );
    DEL_GLOBAL_MONEY_PANEL();
}

// Calendar Editor
void CalendarEditorDisplay() 
{
    while ( true )
    {
        int selection = SEL_GENERIC( CalendarMenuName, CalendarMenu );
        
        switch (selection)
        {
            case -1:
                return;
            case 0:
                CalendarSetNextDaySelect();
                break;
            case 1:
                CallCalendar();
                return;
            case 2:
                ChangeWeather();
                break;
			case 3:
				LoopCurrentTime();
				break;
			case 4: // Third semester
                SET_DBG_DAY( 1, 11, 1 );
                SET_NEXT_DAY( 1, 11, 2 );
                MaxNewCommu();
                CallCalendar();
                break;
        }
    }
}

void CalendarSetNextDaySelect()
{
    int month = SEL_GENERIC_NOT_HELP( MonthMenuName, MonthMenu ) + 1;
    
    if ( month <= 0 )
        return;
        
    PUTS( "Month: " );
    PUT( month );
    
    int day = SelectNumberPrompt( CalendarPrompt2, 2 );
    
    PUTS( "Day: " );
    PUT( day );
    
    if ( day <= 0 )
    {
        // No matter how down you feel on some days, every day is still a positive one.
        MSG_SYSTEM( CalendarError );
        return;
    }
    
    int daysInMonth = 0;
    
    if ( month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 ) daysInMonth = 31;
    else if ( month == 2 ) daysInMonth = 29;
    else if ( month == 4 || month == 6 || month == 9 || month == 11 ) daysInMonth = 30;
    
    // Verify that the day doesn't exceed the number of possible days in the specified month
    if ( day > daysInMonth )
    {
        MSG_SYSTEM( CalendarError );
        return;
    }
    
    int thisMonth = GET_MONTH();
    int thisDay = GET_DAY();
    
    PUTS( "Current Month: " );
    PUT( thisMonth );
    PUTS( "Current Day: " );
    PUT( thisDay );
    
    // We can only go backwards one day at a time, including jumping from the start of one month to the end of the previous month
    if ( ( ( month == thisMonth ) && ( ( day - thisDay ) < -1 ) ) ||
         ( ( month - thisMonth == -1 ) && ( thisDay == 1 && day != daysInMonth ) ) ||
         ( month - thisMonth < -1 )
       )
    {
        MSG_SYSTEM( CalendarBackwardsError );
        //return; // Test bypass
    }
    
    SET_NEXT_DAY( month, day, 1 );
    PUT( month );
    PUT( day );
}

void CallCalendar()
{
    CalendarFade();
    CALL_CALENDAR();
}

void LoopCurrentTime()
{
	SET_NEXT_DAY( GET_MONTH(), GET_DAY(), GET_TIME());
}

void ChangeWeather() 
{
    int selection = SEL_GENERIC_NOT_HELP( WeatherMenuName, WeatherMenu );
        
    switch (selection)
    {
        case -1:
            break;
        default:
            PUSH_WEATHER( selection );
            break;
    }
}

// Flags Editor
void FlagsEditorDisplay() 
{
    while ( true )
    {
        int selection = SEL_GENERIC( FlagMenuName, FlagMenu );
        
        switch (selection)
        {
            case -1:
                return;
            case 0:
                SelectHUDDisplayFlag();
                break;
			case 1:
				ManagePartyMembers();
				break;
			case 2:
				ManageHideout();
				break;
            case 3:
                SelectRomanceFlags();
                break;
            case 4:
                RoomEditorDisplay();
                break;
            case 5: // Manual Input
                SelectBitToggle();
                break;
            case 6:
                PrintEnabledBits();
                break;
            case 7:
                FlagMassEditor();
                break;
			case 8:
				ThirdSemesterFlags();
				break;
        }
    }
}

void ManagePartyMembers() {
    while ( true )
    {
        int selection = SEL_GENERIC( PartyFlagMenuName, PartyFlagMenu );
        
        switch (selection)
        {
            case -1:
                return;
			case 0:
                SelectAddPartyMember();
                break;
            case 1:
                SelectRemovePartyMember();
                break;
            case 2:
                EnablePartyEditing();
                break;
			case 3:
				SelectFollowers();
				break;
			case 4:
				ToggleShowtimes();
				break;
            case 5:
                SelectNavigator();
                break;
		}
	}
}

void FlagMassEditor() {
    while ( true )
    {
        int selection = SEL_GENERIC( FlagMenuName, FlagMassEditor );
        
        switch (selection)
        {
            case -1:
                return;
            case 0:
                DisableAllBits();
                break;
            case 1:
                EnableAllBits();
                break;
            case 2:
                ToggleAllBits();
                break;
            case 3:
                ToggleRange();
                break;
			case 4:
				CLEAR_INHERIT_DATA();
				break;
        }
    }
}

void DisableAllBits() {
    for ( int i = 0; i < 8960; i++ ) 
	{
		BIT_OFF( i ); 
    }
}

void EnableAllBits() {
    for ( int i = 0; i < 8960; i++ ) {
        if (i != 320) 
		{ 
			BIT_ON( i ); 
		}
    }
}

void ToggleAllBits() {
    for ( int i = 0; i < 8960; i++ ) {
        if (BIT_CHK(i)) {
            BIT_OFF(i);
        }
        else if (i != 320) {
            BIT_ON(i);
        }
    }
}

void PrintEnabledBits() {
    for ( int i = 0; i < 8960; i++ ) {
        if (BIT_CHK(i)) 
		{
            PUT(i);
        }
    }
}

void ToggleRange() {
    DisplayMessagePrompt( FlagRangePrompt );
    int range1 =  SelectNumber( 5 );
    DisplayMessagePrompt( FlagRangePrompt2 );
    int range2 = SelectNumber( 5 );
    
    int onOff = SEL_GENERIC_NOT_HELP( -1, SelectOnOff );
    
    switch (onOff) 
    {
        case -1: // Back
            break;
        case 0: // On
            for ( int i = range1; i < range2; i++ ) 
            {
				// Don't disable mod menu or triangle menu (disables thief assist in Royal)
				if ( i != 320 && i != 11781 ) 
				{
					BIT_ON( i );
				}
            }
            break;
        case 1: // Off
            for ( int i = range1; i < range2; i++ ) 
            {
				BIT_OFF( i );
            }
            break;
    }
}

void SelectHUDDisplayFlag()
{
    int dateDisplay = SEL_GENERIC_NOT_HELP( -1, DateDisplayDlg );
    int hud = 0;
    
    switch (dateDisplay) {
        case -1:
            return;
        case 0:
            DATE_DISP( 1 );
            FLD_PANEL_DISP( 1 );
            hud = 1;
            break;
        case 1:
            DATE_DISP( 0 );
            FLD_PANEL_DISP( 0 );
            hud = 2;
            break;
    }

    MSG_WND_DSP(); 
    
    switch ( hud ) {
        case 0:
            break;
        case 1:
            MSG_SYSTEM( HudTest1); 
            break;
        case 2:
            MSG_SYSTEM( HudTest2); 
            break;
    }
    
    MSG_WND_CLS();
}

void SelectAddPartyMember()
{
    int unitIdSelected = SEL_GENERIC_NOT_HELP( UnitMenuName, UnitSelect2 );
    int flg = unitIdSelected + 48;
    if ( flg == 47 ) // Cancel
        return;
	
	if (flg == 58) {
		for ( int i = 2; i <= 10; i++ ) 
		{
			PERSONA_EVOLUTION( i );
		}
	}
	else {
		if ( flg > 56 ) {
        switch ( unitIdSelected ) {
            case 9: // Black Mask
                BIT_ON( 0x40000000 + 272 ); // Enables Black Mask's flag
				SetAkechiBlackMask();
                //BIT_OFF( 0x40000000 + 55 );
                break;
            case 10: // Sumire
                BIT_ON( 0x40000000 + 155 ); // Sumire?
                //BIT_OFF( 0x40000000 + 56 );
                BIT_OFF( 805306368 + 13 ); // ???
                break;
			}
		}
		else {
			BIT_ON( 0x40000000 + flg );
		}
	}
    
}

void SelectRemovePartyMember()
{
    int unitIdSelected = SEL_GENERIC_NOT_HELP( UnitMenuName, UnitSelect2 );
    int flg = unitIdSelected + 48;
    if ( flg == 47 ) // Cancel
        return;

	if (flg == 58) {
		for ( int i = 2; i <= 10; i++ ) 
		{
			PERSONA_EVOLUTION( i );
		}
	}
	else {
		if ( flg > 56 ) {
			// Prolly removing spoiler charas are different matter. Test
			switch ( unitIdSelected ) {
				case 9: // Black Mask
					BIT_OFF( 0x40000000 + 272 ); // Enables Black Mask's flag
					//BIT_OFF( 0x40000000 + 55 );
					break;
				case 10: // Sumire
					BIT_OFF( 0x40000000 + 155 ); // Sumire?
					//BIT_OFF( 0x40000000 + 56 );
					BIT_ON( 805306368 + 13 ); // ???
					break;
			}
		}
		else {
			BIT_OFF( 0x40000000 + flg );
		}
	}
}

void EnablePartyEditing()
{
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 0);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 1);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 2);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 3);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 4);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 5);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 6);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 7);
}

void SelectFollowers()
{
	int flag = SEL_GENERIC_NOT_HELP( UnitMenuName, UnitSelect2 );
	flag = flag + 4114;
	BIT_ON( 4161 );
	ToggleFlag(flag + 4114);
}

void ToggleShowtimes()
{
	int flag = SEL_GENERIC_NOT_HELP( ShowtimeMenuName, ShowtimeMenu );
	ToggleFlag(flag + 11525);
}

void ThirdSemesterFlags()
{
	int flag = SEL_GENERIC_NOT_HELP( ThirdSemesterMenuName, ThirdSemesterMenu );
	ToggleFlag(flag + 02121);
}

void ToggleFlag(int flag) {
	int onOff = SEL_GENERIC_NOT_HELP( -1, SelectOnOff );
    switch (onOff) 
    {
        case -1: // Back
            break;
        case 0: // On
            BIT_ON( flag );
            break;
        case 1: // Off
            BIT_OFF( flag );
            break;
    }
}

void SelectNavigator()
{
    int navi = SEL_GENERIC_NOT_HELP( NaviMenuName, NaviMenu );
    
    switch ( navi ) 
    {
        case -1:
            break;
        case 0: // Morgana
            BIT_OFF( 11277 );
			BIT_OFF( 11543 );
			BIT_ON( 11276 );
            break;
        case 1: // Futaba
            BIT_OFF( 11276 );
			BIT_OFF( 11543 );
			BIT_ON( 11277 );
            break;
		case 2: // Akechi
			BIT_OFF( 11276 );
			BIT_OFF( 11277 );
			BIT_ON( 11543 );
			break;
        case 3: // None
			BIT_OFF( 11543 );
            BIT_OFF( 11277 );
            BIT_OFF( 11276 );
            break;
    }
}

void ManageHideout() {
    int hideout = 74 + SEL_GENERIC_NOT_HELP( HideoutMenuName, HideoutMenu );
    
    switch ( hideout ) 
    {
        case 73:
            break;
        case 74: // School Rooftop
            BIT_ON( 74 );
            BIT_OFF( 75 );
			BIT_OFF( 76 );
			BIT_OFF( 77 );
            break;
        case 75: // Shibuya Walkway
            BIT_OFF( 74 );
            BIT_ON( 75 );
			BIT_OFF( 76 );
			BIT_OFF( 77 );
            break;
		case 76: // Leblanc Floor 2
			BIT_OFF( 74 );
            BIT_OFF( 75 );
			BIT_ON( 76 );
			BIT_OFF( 77 );
            break;
        case 77: // Leblanc Floor 1
			BIT_OFF( 74 );
            BIT_OFF( 75 );
			BIT_OFF( 76 );
			BIT_ON( 77 );
            break;
    }
}

void SelectRomanceFlags() {
    int lover = SEL_GENERIC_NOT_HELP( LoveMenuName, LoveMenu );
    if ( lover == -1 )
        return;
    
    lover += (0x40000000 + 720);
    SelectItemToggle( lover );
}

void SelectBitToggle()
{
    int id = SelectNumber( 5 );
    if (id == -1)
        return;
    
    ToggleFlag(id);
}

void SelectItemToggle(int flag) 
{
    int selection = SEL_GENERIC_NOT_HELP( -1, DateDisplayDlg );
    
    switch (selection) {
        case -1:
            break;
        case 0:
            BIT_ON( flag );
            break;
        case 1:
            BIT_OFF( flag );
            break;
    }
}

// Room Editor
void RoomEditorDisplay() 
{
    while ( true )
    {
        int roomSel = SEL_GENERIC_NOT_HELP( -1, RoomEdit );

        switch (roomSel) 
        {
            case -1:
                return;
            case 0:
                FurnitureEditorDisplay();
                break;
            case 1: 
                CollectibleEditorDisplay();
                break;
            case 2: 
                CleanlinessEditorDisplay();
                break;
        }
    }
}

// Furniture Editor
void FurnitureEditorDisplay() 
{
    while ( true )
    {
        int furnSel = SEL_GENERIC_NOT_HELP( -1, FurnEdit );
    
        switch ( furnSel ) 
        {
            case -1:
                return;
            case 0: // Plant
                SelectItemToggle(4230);
                break;
            case 1: // Sayuri
                SelectItemToggle(101);
                break;
            case 2: // DVD Player
                SelectItemToggle(3142);
                break;
            case 3: // Game Console
                SelectItemToggle(3146);
                break;
            case 4: // Old TV Set
                SelectItemToggle(4232);
                break;
            case 5: // Radio
                SelectItemToggle(4233);
                break;
            case 6: // Cat Bed
                SelectItemToggle(8121);
                break;
            case 7: // UFO Game Prizes
                int ufoPrize = SelectNumber(1);
                switch (ufoPrize) 
                {
                    case 0: //
                        SelectItemToggle(8186);
                        break;
                    case 1: //
                        SelectItemToggle(8187);
                        break;
                    case 2: //
                        SelectItemToggle(8188);
                        break;
                    case 3: //
                        SelectItemToggle(8189);
                        break;
                    case 4: //
                        SelectItemToggle(8190);
                        break;
                }
                break;
        }
    }
}

// Collectible Editor
void CollectibleEditorDisplay() 
{
    while ( true )
    {
        int collSel = SEL_GENERIC_NOT_HELP( -1, CollEdit );
    
        switch ( collSel ) 
        {
            case -1:
                return;
            case 0: // Swan Boat
                SelectItemToggle(3456);
                break;
            case 1: // Ramen
                SelectItemToggle(3457);
                break;
            case 2: // Pennant
                SelectItemToggle(3458);
                break;
            case 3: // Statue
                SelectItemToggle(3459);
                break;
            case 4: // Sky Tree
                SelectItemToggle(3460);
                break;
            case 5: // Big Hera
                SelectItemToggle(3461);
                break;
            case 6: // Shumai
                SelectItemToggle(3462);
                break;
            case 7: // Fusen
                SelectItemToggle(3463);
                break;
            case 8: // I Love
                SelectItemToggle(3464);
                break;
            case 9: // Idol
                SelectItemToggle(3465);
                break;
            case 10: // Next
                CollectibleEditorDisplay2();
                break;
        }
    }
}

void CollectibleEditorDisplay2() 
{
    while ( true )
    {
        int collectables = SEL_GENERIC_NOT_HELP( -1, CollEdit2 );
                
        switch ( collectables ) 
        {
            case -1:
                return;
            case 0: // Seiza
                SelectItemToggle(3466);
                break;
            case 1: // Syogi
                SelectItemToggle(3467);
                break;
            case 2: // Hero
                SelectItemToggle(3468);
                break;
            case 3: // Hamaya
                SelectItemToggle(3469);
                break;
            case 4: // Jyainyan
                SelectItemToggle(3470);
                break;
            case 5: // Sushi
                SelectItemToggle(3471);
                break;
            case 6: // Choco
                SelectItemToggle(3472);
                break;
            case 7: // Kumade
                SelectItemToggle(3473);
                break;
            case 8: // Previous
                return;
        }
    }
}

// Cleanliness Editor
void CleanlinessEditorDisplay() 
{
    while ( true )
    {
        int cleanSel = SEL_GENERIC_NOT_HELP( -1, CleanEdit );
        switch (cleanSel) 
        {
            case -1:
                return;
            case 0: // Bookshelf
                SelectItemToggle(4229);
                break;
            case 1: // Work Bench
                SelectItemToggle(4231);
                break;
            case 2: // Visitors Table
                SelectItemToggle(8176);
                break;
            case 3: // Training Chair
                SelectItemToggle(3144);
                break;
            case 4: // Winter Heater
                SelectItemToggle(8147);
                break;
            case 5: // Laptop
                SelectItemToggle(3237);
                break;
        }
    }
}

void ReloadPreviousField()
{   
    if ( FLD_GET_MAJOR() != FLD_GET_PREV_MAJOR() || FLD_GET_MINOR() != FLD_GET_PREV_MINOR() )
    {
        // Reload previous field
        CALL_FIELD( FLD_GET_PREV_MAJOR(), FLD_GET_PREV_MINOR(), 0, 0 );
    }
}

void MorganaShowFace()
{
    
    if ( FLD_CHECK_MORGANA_BAG() == 1 )
    {
        int localVariable35 = FLD_PC_GET_CURRENT_RESHND( 0 );
        int localVariable36 = MDL_GET_ITEM_RESHND( localVariable35, 2 );
        MDL_ANIM( localVariable36, 50, 0, 0, 1f );
        MDL_ANIM_NEXT( localVariable36, 51, 1, 0, 1f );
    }

}

void MorganaReturnBag()
{
    
    if ( FLD_CHECK_MORGANA_BAG() == 1 )
    {
        int localVariable37 = FLD_PC_GET_CURRENT_RESHND( 0 );
        int localVariable38 = MDL_GET_ITEM_RESHND( localVariable37, 2 );
        MDL_ANIM( localVariable38, 52, 0, 5, 1f );
        MDL_ANIM_NEXT( localVariable38, 0, 1, 0, 1f );
    }

}

void CalendarFade()
{
    FADEOUT( 15, 10 );
    FADE_SYNC();
}

// Fast rank up commus
void RankUpCommu(int cmmId, int lvl) 
{
    CMM_RANKUP( cmmId, lvl, 1 );
    
    if ( !CMM_EXIST( cmmId ) ) {
            CMM_OPEN( cmmId );
    }
    
    CMM_SET_LV( cmmId, lvl );
    CMM_ADD_POINT( cmmId, 9999 );
}

// Play a movie USM
void MoviePlay()
{
    int movieId = SelectNumberPrompt( MoviePlayPrompt, 3 ); 
    
    // In order to avoid misinputs
    if (movieId == -1)
        return;
    
    // Load the movie
    MOVIE_PLAY( movieId );
    MOVIE_SYNC();
}

// Max all commus
void MaxAllCommus()
{
    for (int i = 0; i <= 23; i++)
    {
        if (i<=21)  // Older confidants
            RankUpCommu(i, 10);
        else        // Newer confidants
        {
            int newId;
            switch (i){
                case 22:
                    newId = 28;
                    break;
                case 23:
                    newId = 29;
                    break;
                case 24:
                    newId = 30;
                    break;
                default:
                    newId = 28;
                    break;
            }
            RankUpCommu(newId, 10);
        }
    }
}

// Starts a boss battle by defining manually the ID
void ManualBossSelect()
{
    int bossId = SelectNumberPrompt( ManualBossFightPrompt, 2 ); 
    
    // In order to avoid misinputs
    if (bossId == -1)
        return;
    
    // Start Boss Battle
    FLD_START_BOSS( bossId );
}

void MaxNewCommu()
{
    RankUpCommu(28, 10);
    RankUpCommu(29, 10);
    RankUpCommu(30, 10);
}

void ALL_LEVEL_MAX()
{
    SET_HUMAN_LV( 1, 99 ); // Set level of Ren as 99
    int localVariable8 = 1;
    _38:
    int localVariable10 = 0;
    
    if ( localVariable8 < 11 )
    {
        int localVariable9 = GET_EQUIP_PERSONA_ID( localVariable8 );
        SET_PERSONA_LV( localVariable8, localVariable9, 99 );
        localVariable10 = 0;
        _40:
        
        if ( localVariable10 < 5 )
        {
            ADD_EQUIP_PERSONA_PARAM( localVariable8, localVariable10, 99 );
            localVariable10 = localVariable10 + 1;
            goto _40;
        }

        localVariable8 = localVariable8 + 1;
        goto _38;
    }
}

void SetMaxHPSP()
{
	for ( int i = 0; i <= 10; i++ ) 
	{
		int currHP = GET_MAXHP(i);
		int currSP = GET_MAXSP(i);
		ADD_MAXHP_UP(i, 999 - currHP);
		ADD_MAXSP_UP(i, 999 - currSP);
		SET_HP(i, 999);
		SET_SP(i, 999);
	}
}

void SetAkechiRobinHood()
{
    SET_PERSONA_LV( 10, 240, 43 );
    SET_EQUIP( 10, 0, 0 + 249 );
    SET_EQUIP( 10, 4, 0x00008000 + 253 );
    SET_EQUIP( 10, 1, 0x1000 + 121 );
    SET_EQUIP( 10, 2, 0x2000 + 271 );
}

void SetSumire()
{
    SET_PERSONA_LV( 10, 240, 53 );
    REMOVE_PERSONA_SKILL( 10, 240, 55 );
    REMOVE_PERSONA_SKILL( 10, 240, 236 );
    ADD_PERSONA_SKILL( 10, 240, 231 );
    ADD_PERSONA_SKILL( 10, 240, 56 );
    SET_EQUIP( 10, 0, 0 + 250 );
    SET_EQUIP( 10, 4, 0x00008000 + 254 );
    SET_EQUIP( 10, 1, 0x1000 + 141 );
}

void SetAkechiBlackMask()
{
	int localVariable31 = 0;
	
    SET_PERSONA_LV( 10, 240, 75 );
    REMOVE_PERSONA_SKILL( 10, 240, 253 );
    REMOVE_PERSONA_SKILL( 10, 240, 58 );
    ADD_PERSONA_SKILL( 10, 240, 213 );
    ADD_PERSONA_SKILL( 10, 240, 56 );
    ADD_PERSONA_SKILL( 10, 240, 59 );
    ADD_PERSONA_SKILL( 10, 240, 302 );
    ADD_PERSONA_SKILL( 10, 240, 979 );
    ADD_PERSONA_SKILL( 10, 240, 857 );
    
    if ( REM( localVariable31, 100 ) 10 )
    {
        SET_EQUIP( 10, 4, 0x00008000 + 255 );
    }
    else 
    {
        SET_ITEM_NUM( 0x00008000 + 253, 0 );
        SET_ITEM_NUM( 0x00008000 + 254, 0 );
    }

    SET_EQUIP( 10, 0, 0 + 251 );
    SET_EQUIP( 10, 1, 0x1000 + 11 );
    
    if ( REM( localVariable31, 100 ) <= 9 )
    {
        SET_PERSONA_LV( 9, 209, 75 );
    }
    else 
    {
        WAIT( 9 );
        SET_PERSONA_LV( 9, 209, REM( localVariable31, 100 ) );
    }

    PERSONA_EVOLUTION( 9 );
    REMOVE_PERSONA_SKILL( 9, 239, 71 );
    REMOVE_PERSONA_SKILL( 9, 239, 202 );
    REMOVE_PERSONA_SKILL( 9, 239, 55 );
    REMOVE_PERSONA_SKILL( 9, 239, 65 );
    REMOVE_PERSONA_SKILL( 9, 239, 51 );
    REMOVE_PERSONA_SKILL( 9, 239, 61 );
    REMOVE_PERSONA_SKILL( 9, 239, 985 );
    REMOVE_PERSONA_SKILL( 9, 239, 56 );
    REMOVE_PERSONA_SKILL( 9, 239, 66 );
    REMOVE_PERSONA_SKILL( 9, 239, 840 );
    REMOVE_PERSONA_SKILL( 9, 239, 311 );
    REMOVE_PERSONA_SKILL( 9, 239, 53 );
    REMOVE_PERSONA_SKILL( 9, 239, 63 );
    REMOVE_PERSONA_SKILL( 9, 239, 72 );
    REMOVE_PERSONA_SKILL( 9, 239, 348 );
    REMOVE_PERSONA_SKILL( 9, 239, 279 );
    REMOVE_PERSONA_SKILL( 9, 239, 227 );
    REMOVE_PERSONA_SKILL( 9, 239, 350 );
    REMOVE_PERSONA_SKILL( 9, 239, 351 );
    REMOVE_PERSONA_SKILL( 9, 239, 371 );
    ADD_PERSONA_SKILL( 9, 239, 279 );
    ADD_PERSONA_SKILL( 9, 239, 72 );
    ADD_PERSONA_SKILL( 9, 239, 348 );
    ADD_PERSONA_SKILL( 9, 239, 227 );
    ADD_PERSONA_SKILL( 9, 239, 66 );
    ADD_PERSONA_SKILL( 9, 239, 985 );
    ADD_PERSONA_SKILL( 9, 239, 840 );
    ADD_PERSONA_SKILL( 9, 239, 838 );
    
    if ( REM( localVariable31, 100 ) 9 )
    {
        SET_EQUIP( 9, 4, 0x00008000 + 249 );
    }
    else 
    {
        SET_ITEM_NUM( 0x00008000 + 224, 0 );
    }

    SET_EQUIP( 9, 0, 0 + 246 );
    SET_EQUIP( 9, 1, 0x1000 + 12 );
    SET_EQUIP( 9, 2, 0x2000 + 9 );
    SET_EQUIP( 9, 3, 28672 + 13 );
    RECOVERY_ALL();
    
    if ( !BIT_CHK( 0x40000000 + 14 ) )
    {
        SET_ITEM_NUM( 28672 + 24, 0 );
    }

}